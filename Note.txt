NOTE of COMMAND:

2019/1/15
	1. Git is a version control system.
	2. Git is a free software.

	3. initailize an empty Git repository: git init.
	4. add new file(s): 
		git add <filename(s)>;
		git commit -m <message>
	5. check the status: git status
	6. check what's new: git diff <filename>
	7. see log: 
		git log
		OR 
		git log --pretty=oneline (only show id and comment)
	8. back 
		to last version: git reset --hard HEAD^
		to any version: git reset --hard <commit id>
	9. see command log: git reflog

2019/1/16
	1. discard changes in working directory:  git checkout -- <filename>
	2. unstage uncommited changes: git reset HEAD <filename>
	3. remove file(s): 
		git rm <filename>
		git commit -m <message>

2019/1/18
	1. Create and switch to a new branch:
		git checkout -b <branch name>
		(== git branch <branch name>
			git checkout <branch name>)
	2. check the branch: git branch
	3. switch branch: git checkout <branch name>
	4. merge branch with another: git merge <branch name>
	5. delete branch: git branch -d <branch name>
//////////////////////////////////////////////////////
NOTE of DEFINATION:

2019/1/15
	HEAD: 一个指向现在版本的指针。可变动对象。
2019/1/16
	工作区：直接修改文件内容的地方（git init创建的文件夹区域）
	暂存区（stage）：git add将工作区文件的修改暂存到暂存区
	master branch: git commit将暂存区文件修改提交到master branch（同时清空暂存区）
	git可以恢复误删的文件，但仅有最新版。
2019/1/17
	创建ssh密钥对（公司肯定给安排）:ssh-keygen -t rsa -C "<your email>"
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone git@github.com:<id>/gitskills.git命令克隆。
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
2019/1/18
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
	用git log --graph命令可以看到分支合并图。
	Git分支十分强大，在团队开发中应该充分应用。
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
2019/1/22
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	
	开发一个新feature，最好新建一个分支；
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <branch name>强行删除。
	
	查看远程库信息，使用git remote -v；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin <branch name>，如果推送失败，先用git pull抓取远程的新提交；
	在本地创建和远程分支对应的分支，使用git checkout -b <branch name> origin/<branch name>，本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/<branch name>；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
	
	rebase操作可以把本地未push的分叉提交历史整理成直线；
	rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。